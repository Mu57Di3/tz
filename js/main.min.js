(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Created by Mu57Di3 on 01.06.2015.
 */

var MyApp = Marionette.Application.extend({
    initialize:function (){

    },

    events:{
        'start':'startHandler'
    },

    startHandler: function(){

    }

});

var app = new MyApp();
app.addRegions({
    main: "#app"
});
app.on('start',function(){
    var vEditor = require('./ctrl/editor');
    this.getRegion('main').show(vEditor);
});
app.start();






},{"./ctrl/editor":2}],2:[function(require,module,exports){
/**
 * Контроллер редактор
 */
var editorView = Backbone.Marionette.ItemView.extend({
    template: 'templates/editor.twig',

    canvasContext:null,
    clickX:[],
    clickY:[],
    clickDrag:[],
    paint:false,

    initialize:function (){
    },

    events:{
        'click button#bClear':'clearHandler',
        'mousedown #dSpace':'canvasMouseDownHandler',
        'mousemove #dSpace':'canvasMouseMoveHandler',
        'mouseup #dSpace':'offPaintHandler',
        'mouseleave #dSpace':'offPaintHandler'
    },



    onRender: function() {
        //console.log(333);
        //this.canvasContext = this.$el.find('canvas#dSpace').get(0).getContext("2d");
        var wrapper = this.$('div#cWrapper');
        var canvas = document.createElement('canvas');

        canvas.setAttribute('width', 600);
        canvas.setAttribute('height', 400);
        canvas.setAttribute('id', 'dSpace');
        wrapper.append(canvas);
        if(typeof G_vmlCanvasManager != 'undefined') {
            canvas = G_vmlCanvasManager.initElement(canvas);
        }
        this.canvasContext = canvas.getContext('2d');
    },

    /**
     * Обработчик события очистки канвы
     */
    clearHandler: function(){
        this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
        this.clickX = [];
        this.clickY = [];
        this.clickDrag = [];
    },

    /**
     * Нажатие кнопки на канве
     */
    canvasMouseDownHandler: function(e){
        this.paint = true;
        var p = this.canvasContext.canvas.getBoundingClientRect();
        this.addClick(e.clientX-p.left, e.clientY-p.top,false);
        this.redraw();
    },

    /**
     * Движение мышки
     * @param e
     */
    canvasMouseMoveHandler:function(e){
        if (this.paint){
            var p = this.canvasContext.canvas.getBoundingClientRect();
            this.addClick(e.clientX-p.left, e.clientY-p.top,true);
            this.redraw();
        }
    },

    /**
     * Остановка рисование при откускании кнопки мыши или покидании области отрисовки
     * @param e
     */
    offPaintHandler: function(e){
        this.paint = false;
    },

    addClick: function (x,y,dragging){
        console.log(x,y);
        this.clickX.push(x);
        this.clickY.push(y);
        this.clickDrag.push(dragging);
    },

    redraw:function(){
        this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
        this.canvasContext.strokeStyle = "#000000";
        this.canvasContext.lineJoin = "round";
        this.canvasContext.lineWidth = 5;

        for(var i=0; i < this.clickX.length; i++) {
            this.canvasContext.beginPath();
            if(this.clickDrag[i] && i){
                this.canvasContext.moveTo(this.clickX[i-1], this.clickY[i-1]);
            }else{
                this.canvasContext.moveTo(this.clickX[i]-1, this.clickY[i]);
            }
            this.canvasContext.lineTo(this.clickX[i], this.clickY[i]);
            this.canvasContext.closePath();
            this.canvasContext.stroke();
        }
    }/*,

    getPosition: function (e){
        var canvas = this.canvasContext.canvas;

        var curleft = 0, curtop = 0;
        if (canvas.offsetParent) {
            do {
                curleft += parseInt(canvas.offsetLeft);
                curtop += parseInt(canvas.offsetTop);
            } while (canvas = canvas.offsetParent);
            return { x: e.pageX-curleft, y: e.pageY-curtop };
        }
        return undefined;

    }*/

});

module.exports =  new editorView();
},{}]},{},[1])


//# sourceMappingURL=main.min.js.map